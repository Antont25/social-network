{"ast":null,"code":"import { api } from \"../api/api\";\nimport { setIsLoading } from \"./authorizedReducer\";\nconst ADD_POST = 'ADD_POST';\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\nconst SET_STATUS_UPDATES = 'SET_STATUS_UPDATES';\nconst initialSate = {\n  posts: [{\n    id: 1,\n    massage: \"sacasc\",\n    likes: 4\n  }, {\n    id: 2,\n    massage: \"sacasc\",\n    likes: 4\n  }, {\n    id: 3,\n    massage: \"sacasc\",\n    likes: 4\n  }, {\n    id: 4,\n    massage: \"sacasc\",\n    likes: 4\n  }],\n  userProfile: {},\n  userStatus: null\n};\nexport const profileReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialSate;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST:\n      let newPost = {\n        id: 4,\n        massage: action.payload,\n        likes: 4\n      };\n      return { ...state,\n        posts: [newPost, ...state.posts]\n      };\n\n    case SET_USER_PROFILE:\n      return { ...state,\n        userProfile: action.payload\n      };\n\n    case SET_STATUS_UPDATES:\n      return { ...state,\n        userStatus: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\nexport const addPost = payload => ({\n  type: ADD_POST,\n  payload\n});\nexport const setUserProfile = payload => ({\n  type: SET_USER_PROFILE,\n  payload\n});\nexport const setStatusUpdates = payload => ({\n  type: SET_STATUS_UPDATES,\n  payload\n});\nexport const fetchUserProfileData = paramsURL => async dispatch => {\n  try {\n    dispatch(setIsLoading(true));\n\n    if (paramsURL) {\n      debugger;\n      let response = await api.getUserProfile(paramsURL);\n      dispatch(setUserProfile(response));\n      let responseStatus = await api.getStatusUser(response.userId);\n      dispatch(setStatusUpdates(responseStatus));\n    }\n  } catch (error) {\n    console.log(error);\n  } finally {\n    dispatch(setIsLoading(false));\n  }\n};\nexport const fetchStatusUpdates = (newStatus, usersId) => async dispatch => {\n  try {\n    dispatch(setIsLoading(true));\n    let response = await api.statusUpdates(newStatus);\n\n    if (response.resultCode === 0) {\n      let responseNewStatus = await api.getStatusUser(usersId);\n      dispatch(setStatusUpdates(responseNewStatus));\n    }\n  } catch (error) {\n    console.log(error);\n  } finally {\n    dispatch(setIsLoading(false));\n  }\n};","map":{"version":3,"names":["api","setIsLoading","ADD_POST","SET_USER_PROFILE","SET_STATUS_UPDATES","initialSate","posts","id","massage","likes","userProfile","userStatus","profileReducer","state","action","type","newPost","payload","addPost","setUserProfile","setStatusUpdates","fetchUserProfileData","paramsURL","dispatch","response","getUserProfile","responseStatus","getStatusUser","userId","error","console","log","fetchStatusUpdates","newStatus","usersId","statusUpdates","resultCode","responseNewStatus"],"sources":["G:/program/practica/react-practica/it-incubator/samurai-way-TS/src/redux/profileReducer.ts"],"sourcesContent":["import {api} from \"../api/api\";\r\nimport {setIsLoading} from \"./authorizedReducer\";\r\nimport {AppThunk} from \"./store\";\r\n\r\n\r\nexport type InitialSateType = typeof initialSate\r\nexport type PostsType = {\r\n    id: number\r\n    massage: string\r\n    likes: number\r\n}\r\nexport type UserProfileType = {\r\n    aboutMe: string | null\r\n    contacts: {\r\n        facebook: string | null\r\n        website: string | null\r\n        vk: string | null\r\n        twitter: string | null\r\n        instagram: string | null\r\n        youtube: string | null,\r\n        github: string | null\r\n        mainLink: string | null\r\n    },\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    fullName: string | null\r\n    userId: number\r\n    photos: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n}\r\nexport type ActionProfileReducerType =\r\n    ReturnType<typeof addPost>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setStatusUpdates>\r\n\r\n\r\nconst ADD_POST = 'ADD_POST';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS_UPDATES = 'SET_STATUS_UPDATES';\r\nconst initialSate = {\r\n    posts: [\r\n        {id: 1, massage: \"sacasc\", likes: 4},\r\n        {id: 2, massage: \"sacasc\", likes: 4},\r\n        {id: 3, massage: \"sacasc\", likes: 4},\r\n        {id: 4, massage: \"sacasc\", likes: 4},\r\n    ] as Array<PostsType>,\r\n    userProfile: {} as UserProfileType,\r\n    userStatus: null as null | string\r\n}\r\n\r\nexport const profileReducer = (state = initialSate, action: ActionProfileReducerType): InitialSateType => {\r\n    switch (action.type) {\r\n        case ADD_POST :\r\n            let newPost: PostsType = {\r\n                id: 4,\r\n                massage: action.payload,\r\n                likes: 4\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [newPost, ...state.posts],\r\n            }\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                userProfile: action.payload\r\n            }\r\n        case SET_STATUS_UPDATES:\r\n            return {\r\n                ...state,\r\n                userStatus: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\n\r\nexport const addPost = (payload: string) => ({type: ADD_POST, payload} as const)\r\nexport const setUserProfile = (payload: UserProfileType) => ({type: SET_USER_PROFILE, payload} as const)\r\nexport const setStatusUpdates = (payload: string) => ({type: SET_STATUS_UPDATES, payload} as const)\r\n\r\n\r\nexport const fetchUserProfileData = (paramsURL: number): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(setIsLoading(true))\r\n        if (paramsURL) {\r\n            debugger\r\n            let response = await api.getUserProfile(paramsURL)\r\n            dispatch(setUserProfile(response))\r\n            let responseStatus = await api.getStatusUser(response.userId)\r\n            dispatch(setStatusUpdates(responseStatus))\r\n        }\r\n    } catch (error) {\r\n        console.log(error)\r\n    } finally {\r\n        dispatch(setIsLoading(false))\r\n    }\r\n}\r\nexport const fetchStatusUpdates = (newStatus: string, usersId: number): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(setIsLoading(true))\r\n        let response = await api.statusUpdates(newStatus)\r\n        if (response.resultCode === 0) {\r\n            let responseNewStatus = await api.getStatusUser(usersId)\r\n            dispatch(setStatusUpdates(responseNewStatus))\r\n        }\r\n    } catch (error) {\r\n        console.log(error)\r\n    } finally {\r\n        dispatch(setIsLoading(false))\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}