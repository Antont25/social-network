{"ast":null,"code":"import axios from \"axios\";\nconst instance = axios.create({\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n  withCredentials: true,\n  headers: {\n    \"API-KEY\": \"b68e1396-946f-405d-92ed-906f9f26a9d8\"\n  }\n});\nexport const api = {\n  async getUser(currentPage) {\n    const response = await instance.get(`users?page=${currentPage}`);\n    return response.data;\n  },\n\n  async getUserProfile(paramsURL) {\n    debugger;\n    const response = await instance.get(`profile/${paramsURL}`);\n    return response.data;\n  },\n\n  async authorizedMe() {\n    const response = await instance.get(`auth/me`);\n    return response.data;\n  },\n\n  async unFollowUser(usersId) {\n    const response = await instance.delete(`follow/${usersId}`);\n    return response.data;\n  },\n\n  async followUser(usersId) {\n    const response = await instance.post(`follow/${usersId}`);\n    return response.data;\n  },\n\n  async statusUpdates(newStatus) {\n    const response = await instance.put(`profile/status`, {\n      status: newStatus\n    });\n    return response.data;\n  },\n\n  async getStatusUser(userId) {\n    const response = await instance.get(`profile/status/${userId}`);\n    return response.data;\n  },\n\n  async authorize(email, password) {\n    const response = await instance.post(`auth/login`, {\n      email,\n      password\n    });\n    return response.data;\n  },\n\n  async logout() {\n    const response = await instance.delete(`auth/login`);\n    return response.data;\n  }\n\n}; //type","map":{"version":3,"names":["axios","instance","create","baseURL","withCredentials","headers","api","getUser","currentPage","response","get","data","getUserProfile","paramsURL","authorizedMe","unFollowUser","usersId","delete","followUser","post","statusUpdates","newStatus","put","status","getStatusUser","userId","authorize","email","password","logout"],"sources":["G:/program/practica/react-practica/it-incubator/samurai-way-TS/src/api/api.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport {UserProfileType} from \"../redux/profileReducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"b68e1396-946f-405d-92ed-906f9f26a9d8\"\r\n    }\r\n})\r\n\r\n\r\nexport const api = {\r\n    async getUser(currentPage: number) {\r\n        const response = await instance.get(`users?page=${currentPage}`)\r\n        return response.data\r\n    },\r\n    async getUserProfile(paramsURL: number) {\r\n        debugger\r\n        const response = await instance.get<UserProfileType>(`profile/${paramsURL}`)\r\n        return response.data\r\n    },\r\n    async authorizedMe() {\r\n        const response = await instance.get(`auth/me`)\r\n        return response.data\r\n    },\r\n    async unFollowUser(usersId: number) {\r\n        const response = await instance.delete(`follow/${usersId}`)\r\n        return response.data\r\n    },\r\n    async followUser(usersId: number) {\r\n        const response = await instance.post(`follow/${usersId}`)\r\n        return response.data\r\n    },\r\n    async statusUpdates(newStatus: string) {\r\n        const response = await instance.put(`profile/status`, {status: newStatus})\r\n        return response.data\r\n    },\r\n    async getStatusUser(userId: number) {\r\n        const response = await instance.get(`profile/status/${userId}`)\r\n        return response.data\r\n    },\r\n    async authorize(email: string, password: string) {\r\n        const response = await instance.post(`auth/login`, {email, password})\r\n        return response.data\r\n    },\r\n    async logout() {\r\n        const response = await instance.delete(`auth/login`)\r\n        return response.data\r\n    },\r\n\r\n}\r\n\r\n//type\r\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAa;EAC1BC,OAAO,EAAE,+CADiB;EAE1BC,eAAe,EAAE,IAFS;EAG1BC,OAAO,EAAE;IACL,WAAW;EADN;AAHiB,CAAb,CAAjB;AASA,OAAO,MAAMC,GAAG,GAAG;EACf,MAAMC,OAAN,CAAcC,WAAd,EAAmC;IAC/B,MAAMC,QAAQ,GAAG,MAAMR,QAAQ,CAACS,GAAT,CAAc,cAAaF,WAAY,EAAvC,CAAvB;IACA,OAAOC,QAAQ,CAACE,IAAhB;EACH,CAJc;;EAKf,MAAMC,cAAN,CAAqBC,SAArB,EAAwC;IACpC;IACA,MAAMJ,QAAQ,GAAG,MAAMR,QAAQ,CAACS,GAAT,CAA+B,WAAUG,SAAU,EAAnD,CAAvB;IACA,OAAOJ,QAAQ,CAACE,IAAhB;EACH,CATc;;EAUf,MAAMG,YAAN,GAAqB;IACjB,MAAML,QAAQ,GAAG,MAAMR,QAAQ,CAACS,GAAT,CAAc,SAAd,CAAvB;IACA,OAAOD,QAAQ,CAACE,IAAhB;EACH,CAbc;;EAcf,MAAMI,YAAN,CAAmBC,OAAnB,EAAoC;IAChC,MAAMP,QAAQ,GAAG,MAAMR,QAAQ,CAACgB,MAAT,CAAiB,UAASD,OAAQ,EAAlC,CAAvB;IACA,OAAOP,QAAQ,CAACE,IAAhB;EACH,CAjBc;;EAkBf,MAAMO,UAAN,CAAiBF,OAAjB,EAAkC;IAC9B,MAAMP,QAAQ,GAAG,MAAMR,QAAQ,CAACkB,IAAT,CAAe,UAASH,OAAQ,EAAhC,CAAvB;IACA,OAAOP,QAAQ,CAACE,IAAhB;EACH,CArBc;;EAsBf,MAAMS,aAAN,CAAoBC,SAApB,EAAuC;IACnC,MAAMZ,QAAQ,GAAG,MAAMR,QAAQ,CAACqB,GAAT,CAAc,gBAAd,EAA+B;MAACC,MAAM,EAAEF;IAAT,CAA/B,CAAvB;IACA,OAAOZ,QAAQ,CAACE,IAAhB;EACH,CAzBc;;EA0Bf,MAAMa,aAAN,CAAoBC,MAApB,EAAoC;IAChC,MAAMhB,QAAQ,GAAG,MAAMR,QAAQ,CAACS,GAAT,CAAc,kBAAiBe,MAAO,EAAtC,CAAvB;IACA,OAAOhB,QAAQ,CAACE,IAAhB;EACH,CA7Bc;;EA8Bf,MAAMe,SAAN,CAAgBC,KAAhB,EAA+BC,QAA/B,EAAiD;IAC7C,MAAMnB,QAAQ,GAAG,MAAMR,QAAQ,CAACkB,IAAT,CAAe,YAAf,EAA4B;MAACQ,KAAD;MAAQC;IAAR,CAA5B,CAAvB;IACA,OAAOnB,QAAQ,CAACE,IAAhB;EACH,CAjCc;;EAkCf,MAAMkB,MAAN,GAAe;IACX,MAAMpB,QAAQ,GAAG,MAAMR,QAAQ,CAACgB,MAAT,CAAiB,YAAjB,CAAvB;IACA,OAAOR,QAAQ,CAACE,IAAhB;EACH;;AArCc,CAAZ,C,CAyCP"},"metadata":{},"sourceType":"module"}