{"ast":null,"code":"var _jsxFileName = \"C:\\\\program\\\\samurai-way-TS\\\\src\\\\components\\\\profile\\\\userInfo\\\\UserInfo.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport style from './userInfo.module.css';\nimport avatar from '../../../assest/img/avatar.png';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItem from '@material-ui/core/ListItem';\nimport { Status } from '../../users/Status';\nimport { useAppDispatch } from '../../../utils/hooks/hooks';\nimport { fetchStatusUpdates, updateContacts } from '../../../redux/profileReducer';\nimport { AvatarUser } from './Avatar/AvatarUser';\nimport Button from '../../common/button/Button';\nimport { useFormik } from 'formik';\nimport { validationLogin } from '../../../utils/validation/validation';\nimport { Input } from '../../common/input/Input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UserInfo = props => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const [editMode, setEditMode] = useState(false);\n  const isOwner = props.authorizedUserId === props.userProfile.userId;\n\n  const setStatusHandler = value => {\n    dispatch(fetchStatusUpdates(value, props.userProfile.userId));\n  };\n\n  const editModeHandler = () => {\n    setEditMode(!editMode);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 3,\n    className: style.avatarPaper,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: style.avatarBloc,\n      children: [/*#__PURE__*/_jsxDEV(AvatarUser, {\n        src: props.userProfile.photos.small || avatar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style.info,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: style.name,\n          children: props.userProfile.fullName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Status, {\n          valueStatus: props.userStatus,\n          callback: setStatusHandler,\n          isOwner: isOwner\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: style.contacts,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        className: style.contactItem,\n        children: editMode ? /*#__PURE__*/_jsxDEV(FormContacts, {\n          setEditMode: setEditMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 27\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(ListItem, {\n            children: Object.keys(props.userProfile.contacts).map((item, index) => /*#__PURE__*/_jsxDEV(ListItemText, {\n              className: style.contactHeader,\n              primary: `${item}:`\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 98\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n            children: Object.values(props.userProfile.contacts).map((item, index) => /*#__PURE__*/_jsxDEV(ListItemText, {\n              className: style.contactBody,\n              primary: item || 'нету даных'\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 100\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 29\n          }, this), isOwner && !editMode && /*#__PURE__*/_jsxDEV(Button, {\n            onClick: editModeHandler,\n            children: \"\\u0440\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C \\u0444\\u043E\\u0440\\u043C\\u0443\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 54\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserInfo, \"/myqj4reRwkabyhN1NBG/D6r1cs=\", false, function () {\n  return [useAppDispatch];\n});\n\n_c = UserInfo;\nexport default UserInfo;\n\nconst FormContacts = props => {\n  _s2();\n\n  const dispatch = useAppDispatch();\n  const formik = useFormik({\n    initialValues: {\n      facebook: '',\n      website: '',\n      vk: '',\n      twitter: '',\n      instagram: '',\n      youtube: '',\n      github: '',\n      mainLink: ''\n    },\n    validationSchema: validationLogin,\n    onSubmit: values => {\n      debugger;\n      dispatch(updateContacts(values));\n      props.setEditMode(false);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        id: 'facebook',\n        label: 'Facebook',\n        ...formik.getFieldProps('facebook'),\n        error: formik.errors.facebook,\n        touched: formik.touched.facebook,\n        onBlur: () => formik.setFieldTouched('facebook', true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \"\\u0441\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s2(FormContacts, \"IP/YE30Q66hU4fu5z2mAwBnXXOo=\", false, function () {\n  return [useAppDispatch, useFormik];\n});\n\n_c2 = FormContacts;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"UserInfo\");\n$RefreshReg$(_c2, \"FormContacts\");","map":{"version":3,"names":["React","useState","style","avatar","Paper","Grid","ListItemText","ListItem","Status","useAppDispatch","fetchStatusUpdates","updateContacts","AvatarUser","Button","useFormik","validationLogin","Input","UserInfo","props","dispatch","editMode","setEditMode","isOwner","authorizedUserId","userProfile","userId","setStatusHandler","value","editModeHandler","avatarPaper","avatarBloc","photos","small","info","name","fullName","userStatus","contacts","contactItem","Object","keys","map","item","index","contactHeader","values","contactBody","FormContacts","formik","initialValues","facebook","website","vk","twitter","instagram","youtube","github","mainLink","validationSchema","onSubmit","handleSubmit","getFieldProps","errors","touched","setFieldTouched"],"sources":["C:/program/samurai-way-TS/src/components/profile/userInfo/UserInfo.tsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport style from './userInfo.module.css'\r\nimport avatar from '../../../assest/img/avatar.png'\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport {Status} from '../../users/Status';\r\nimport {UserProfileType} from '../../../api/api';\r\nimport {useAppDispatch} from '../../../utils/hooks/hooks';\r\nimport {fetchStatusUpdates, updateContacts} from '../../../redux/profileReducer';\r\nimport {AvatarUser} from './Avatar/AvatarUser';\r\nimport Button from '../../common/button/Button';\r\nimport {useFormik} from 'formik';\r\nimport {validationLogin} from '../../../utils/validation/validation';\r\nimport {fetchAuthorization} from '../../../redux/appReducer';\r\nimport {Input} from '../../common/input/Input';\r\n\r\n\r\ntype UserInfoType = {\r\n    userProfile: UserProfileType\r\n    authorizedUserId: number | null\r\n    userStatus: string | null\r\n\r\n}\r\nconst UserInfo: React.FC<UserInfoType> = (props) => {\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const isOwner = props.authorizedUserId === props.userProfile.userId\r\n\r\n    const setStatusHandler = (value: string) => {\r\n        dispatch(fetchStatusUpdates(value, props.userProfile.userId))\r\n    }\r\n    const editModeHandler = () => {\r\n        setEditMode(!editMode)\r\n    }\r\n\r\n\r\n    return (\r\n        <Paper elevation={3} className={style.avatarPaper}>\r\n            <Grid container className={style.avatarBloc}>\r\n\r\n                <AvatarUser src={props.userProfile.photos.small || avatar}/>\r\n\r\n                <div className={style.info}>\r\n                    <div className={style.name}>{props.userProfile.fullName}</div>\r\n                    <Status valueStatus={props.userStatus}\r\n                            callback={setStatusHandler}\r\n                            isOwner={isOwner}/>\r\n                </div>\r\n            </Grid>\r\n\r\n            <Grid container className={style.contacts}>\r\n                <h2>contacts</h2>\r\n                <Grid item className={style.contactItem}>\r\n                    {editMode\r\n                        ? <FormContacts setEditMode={setEditMode}/>\r\n                        : <>\r\n                            <ListItem>\r\n                                {\r\n                                    Object.keys(props.userProfile.contacts).map((item, index) => <ListItemText\r\n                                        className={style.contactHeader}\r\n                                        key={index}\r\n                                        primary={`${item}:`}/>)\r\n                                }\r\n                            </ListItem>\r\n\r\n\r\n                            <ListItem>\r\n                                {\r\n                                    Object.values(props.userProfile.contacts).map((item, index) => <ListItemText\r\n                                        className={style.contactBody}\r\n                                        key={index}\r\n                                        primary={item || 'нету даных'}/>\r\n                                    )\r\n\r\n                                }\r\n                            </ListItem>\r\n                            {isOwner && !editMode && <Button onClick={editModeHandler}>редактировать форму</Button>}\r\n                        </>\r\n                    }\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </Paper>\r\n\r\n    )\r\n        ;\r\n};\r\n\r\nexport default UserInfo;\r\n\r\nconst FormContacts = (props: FormContactsType) => {\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            facebook: '',\r\n            website: '',\r\n            vk: '',\r\n            twitter: '',\r\n            instagram: '',\r\n            youtube: '',\r\n            github: '',\r\n            mainLink: '',\r\n        },\r\n        validationSchema: validationLogin,\r\n        onSubmit: (values,) => {\r\n            debugger\r\n            dispatch(updateContacts(values));\r\n            props.setEditMode(false)\r\n        },\r\n    });\r\n    return (\r\n        <>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <Input id={'facebook'}\r\n                       label={'Facebook'}\r\n                       {...formik.getFieldProps('facebook')}\r\n                       error={formik.errors.facebook}\r\n                       touched={formik.touched.facebook}\r\n                       onBlur={() => formik.setFieldTouched('facebook', true)}\r\n                />\r\n                {/*<Input id={'website'}*/}\r\n                {/*       label={'Website'}*/}\r\n                {/*       {...formik.getFieldProps('website')}*/}\r\n                {/*       error={formik.errors.website}*/}\r\n                {/*       touched={formik.touched.website}*/}\r\n                {/*       onBlur={() => formik.setFieldTouched('website', true)}*/}\r\n                {/*/>*/}\r\n                {/*<Input id={'vk'}*/}\r\n                {/*       label={'vk'}*/}\r\n                {/*       {...formik.getFieldProps('vk')}*/}\r\n                {/*       error={formik.errors.vk}*/}\r\n                {/*       touched={formik.touched.vk}*/}\r\n                {/*       onBlur={() => formik.setFieldTouched('vk', true)}*/}\r\n                {/*/>*/}\r\n                {/*<Input id={'twitter'}*/}\r\n                {/*       label={'Twitter'}*/}\r\n                {/*       {...formik.getFieldProps('twitter')}*/}\r\n                {/*       error={formik.errors.twitter}*/}\r\n                {/*       touched={formik.touched.twitter}*/}\r\n                {/*       onBlur={() => formik.setFieldTouched('twitter', true)}*/}\r\n                {/*/>*/}\r\n                {/*<Input id={'youtube'}*/}\r\n                {/*       label={'Youtube'}*/}\r\n                {/*       {...formik.getFieldProps('youtube')}*/}\r\n                {/*       error={formik.errors.youtube}*/}\r\n                {/*       touched={formik.touched.youtube}*/}\r\n                {/*       onBlur={() => formik.setFieldTouched('youtube', true)}*/}\r\n                {/*/>*/}\r\n                {/*<Input id={'github'}*/}\r\n                {/*       label={'Github'}*/}\r\n                {/*       {...formik.getFieldProps('github')}*/}\r\n                {/*       error={formik.errors.github}*/}\r\n                {/*       touched={formik.touched.github}*/}\r\n                {/*       onBlur={() => formik.setFieldTouched('github', true)}*/}\r\n                {/*/>*/}\r\n                {/*<Input id={'mainLink'}*/}\r\n                {/*       label={'MainLink'}*/}\r\n                {/*       {...formik.getFieldProps('mainLink')}*/}\r\n                {/*       error={formik.errors.mainLink}*/}\r\n                {/*       touched={formik.touched.mainLink}*/}\r\n                {/*       onBlur={() => formik.setFieldTouched('mainLink', true)}*/}\r\n                {/*/>*/}\r\n                <Button\r\n                    type=\"submit\">\r\n                    сохранить\r\n                </Button>\r\n            </form>\r\n        </>\r\n\r\n    )\r\n}\r\ntype FormContactsType = {\r\n    setEditMode: (value: boolean) => void\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}