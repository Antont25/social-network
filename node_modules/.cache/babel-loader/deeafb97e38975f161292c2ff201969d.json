{"ast":null,"code":"var _jsxFileName = \"C:\\\\program\\\\samurai-way-TS\\\\src\\\\components\\\\login\\\\Login.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useFormik } from 'formik';\nimport style from './login.module.css';\nimport Button from '../common/button/Button';\nimport { Input } from '../common/input/Input';\nimport { useAppDispatch, useAppSelector } from '../../utils/hooks/hooks';\nimport { fetchAuthorization } from '../../redux/appReducer';\nimport { useNavigate } from 'react-router-dom';\nimport { validationLogin } from '../../utils/validation/validation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Login = () => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const authorizedStatus = useAppSelector(state => state.app.authorizedStatus);\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (authorizedStatus === 'successfully') navigate('/');\n  }, [authorizedStatus]);\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    validationSchema: validationLogin,\n    onSubmit: (values, _ref) => {\n      let {\n        setStatus\n      } = _ref;\n      dispatch(fetchAuthorization(values.email, values.password, setStatus));\n    }\n  });\n  const disabled = formik.touched.password && formik.touched.email && !!(formik.errors.email || formik.errors.password);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.loginBloc,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        id: 'email',\n        label: 'Email',\n        ...formik.getFieldProps('email'),\n        error: formik.errors.email,\n        touched: formik.touched.email,\n        onBlur: () => formik.setFieldTouched('email', true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"password\",\n        label: \"Password\",\n        type: \"password\",\n        ...formik.getFieldProps('password'),\n        error: formik.errors.password || formik.status,\n        touched: formik.touched.password,\n        onBlur: () => formik.setFieldTouched('password', true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        className: style.loginBtn,\n        disabled: disabled,\n        children: \"\\u0412\\u043E\\u0439\\u0442\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Login, \"4pUchZJZbc8n2C5tLJIoq7DsAWQ=\", false, function () {\n  return [useAppDispatch, useAppSelector, useNavigate, useFormik];\n});\n\n_c = Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useEffect","useFormik","style","Button","Input","useAppDispatch","useAppSelector","fetchAuthorization","useNavigate","validationLogin","Login","dispatch","authorizedStatus","state","app","navigate","formik","initialValues","email","password","validationSchema","onSubmit","values","setStatus","disabled","touched","errors","loginBloc","handleSubmit","getFieldProps","setFieldTouched","status","loginBtn"],"sources":["C:/program/samurai-way-TS/src/components/login/Login.tsx"],"sourcesContent":["import React, {useEffect} from 'react';\r\nimport {useFormik} from 'formik';\r\nimport style from './login.module.css'\r\nimport Button from '../common/button/Button';\r\nimport {Input} from '../common/input/Input';\r\nimport {useAppDispatch, useAppSelector} from '../../utils/hooks/hooks';\r\nimport {fetchAuthorization} from '../../redux/appReducer';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport {validationLogin} from '../../utils/validation/validation';\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n    const authorizedStatus = useAppSelector(state => state.app.authorizedStatus)\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        if (authorizedStatus === 'successfully') navigate('/')\r\n    }, [authorizedStatus])\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n        validationSchema: validationLogin,\r\n        onSubmit: (values, {setStatus}) => {\r\n            dispatch(fetchAuthorization(values.email, values.password, setStatus));\r\n        },\r\n    });\r\n    const disabled = (formik.touched.password && formik.touched.email && !!(formik.errors.email || formik.errors.password))\r\n    return (\r\n        <div className={style.loginBloc}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <Input id={'email'}\r\n                       label={'Email'}\r\n                       {...formik.getFieldProps('email')}\r\n                       error={formik.errors.email}\r\n                       touched={formik.touched.email}\r\n                       onBlur={() => formik.setFieldTouched('email', true)}\r\n                />\r\n                <Input id=\"password\"\r\n                       label=\"Password\"\r\n                       type=\"password\"\r\n                       {...formik.getFieldProps('password')}\r\n                       error={formik.errors.password || formik.status}\r\n                       touched={formik.touched.password}\r\n                       onBlur={() => formik.setFieldTouched('password', true)}\r\n                />\r\n                <Button type=\"submit\"\r\n                        className={style.loginBtn}\r\n                        disabled={disabled}\r\n                >\r\n                    Войти\r\n                </Button>\r\n            </form>\r\n        </div>\r\n    );\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}