{"ast":null,"code":"var _jsxFileName = \"C:\\\\program\\\\samurai-way-TS\\\\src\\\\components\\\\EditMode\\\\EditMode.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport CreateIcon from '@material-ui/icons/Create';\nimport style from '../users/users.module.css';\nimport TextField from '@material-ui/core/TextField/TextField';\nimport IconButton from '@material-ui/core/IconButton/IconButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const EditMode = props => {\n  _s();\n\n  const styles = theme => ({\n    container: {\n      display: \"flex\",\n      flexWrap: \"wrap\"\n    },\n    textField: {\n      marginLeft: theme.spacing.unit,\n      marginRight: theme.spacing.unit\n    },\n    dense: {\n      marginTop: 16\n    },\n    menu: {\n      width: 200\n    },\n\n    /* STYLES FOR THE OUTLINE BORDER */\n    specialOutline: {\n      borderColor: \"pink\",\n      borderWidth: 4\n    }\n  });\n\n  const [valueInput, setValueInput] = useState(props.value);\n  const [editMode, setEditMode] = useState(true);\n\n  function onClickHandler() {\n    setEditMode(true);\n  }\n\n  function onBlurHandler() {\n    if (valueInput !== props.value) {\n      valueInput && props.callback(valueInput);\n    } // setEditMode(false)\n\n  }\n\n  useEffect(() => {\n    setValueInput(props.value);\n  }, [props.value]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.editBlock,\n    children: props.isOwner ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: editMode ? /*#__PURE__*/_jsxDEV(TextField, {\n        id: props.label,\n        multiline: true,\n        autoFocus: true,\n        maxRows: 4,\n        inputProps: {\n          maxLength: 80\n        },\n        value: valueInput,\n        onBlur: onBlurHandler,\n        color: 'primary',\n        onFocus: e => e.currentTarget.setSelectionRange(e.currentTarget.value.length, e.currentTarget.value.length),\n        className: style.statusInput,\n        onChange: e => setValueInput(e.currentTarget.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 27\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(SpanText, {\n          value: props.value,\n          className: style.textStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          size: 'small',\n          disabled: editMode,\n          onClick: onClickHandler,\n          children: /*#__PURE__*/_jsxDEV(CreateIcon, {\n            className: style.icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(SpanText, {\n      value: props.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 19\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EditMode, \"F/Wn0ncx5JRyuB2Dqusc3pnOVUU=\");\n\n_c = EditMode;\n\nconst SpanText = props => {\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: props.className,\n    onDoubleClick: props.callback,\n    children: props.value || 'нету даных'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 12\n  }, this);\n};\n\n_c2 = SpanText;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditMode\");\n$RefreshReg$(_c2, \"SpanText\");","map":{"version":3,"names":["React","useEffect","useState","CreateIcon","style","TextField","IconButton","EditMode","props","styles","theme","container","display","flexWrap","textField","marginLeft","spacing","unit","marginRight","dense","marginTop","menu","width","specialOutline","borderColor","borderWidth","valueInput","setValueInput","value","editMode","setEditMode","onClickHandler","onBlurHandler","callback","editBlock","isOwner","label","maxLength","e","currentTarget","setSelectionRange","length","statusInput","textStatus","icon","SpanText","className"],"sources":["C:/program/samurai-way-TS/src/components/EditMode/EditMode.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport style from '../users/users.module.css';\r\nimport TextField from '@material-ui/core/TextField/TextField';\r\nimport IconButton from '@material-ui/core/IconButton/IconButton';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\ntype EditModeParams = {\r\n    value: string | null\r\n    isOwner: boolean\r\n    label: string\r\n    callback: (value: string) => void\r\n};\r\nexport const EditMode = (props: EditModeParams) => {\r\n    const styles = theme => ({\r\n        container: {\r\n            display: \"flex\",\r\n            flexWrap: \"wrap\"\r\n        },\r\n        textField: {\r\n            marginLeft: theme.spacing.unit,\r\n            marginRight: theme.spacing.unit\r\n        },\r\n        dense: {\r\n            marginTop: 16\r\n        },\r\n        menu: {\r\n            width: 200\r\n        },\r\n        /* STYLES FOR THE OUTLINE BORDER */\r\n        specialOutline: {\r\n            borderColor: \"pink\",\r\n            borderWidth: 4\r\n        }\r\n    });\r\n\r\n\r\n    const [valueInput, setValueInput] = useState(props.value)\r\n    const [editMode, setEditMode] = useState(true)\r\n\r\n    function onClickHandler() {\r\n        setEditMode(true)\r\n    }\r\n\r\n    function onBlurHandler() {\r\n\r\n        if (valueInput !== props.value) {\r\n            valueInput && props.callback(valueInput)\r\n        }\r\n        // setEditMode(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setValueInput(props.value)\r\n    }, [props.value])\r\n\r\n    return (\r\n        <div className={style.editBlock}>\r\n            {props.isOwner\r\n                ? <>\r\n                    {editMode\r\n                        ? <TextField\r\n                            id={props.label}\r\n                            multiline\r\n                            autoFocus={true}\r\n                            maxRows={4}\r\n                            inputProps={{maxLength: 80}}\r\n                            value={valueInput}\r\n                            onBlur={onBlurHandler}\r\n                            color={'primary'}\r\n                            onFocus={(e) =>\r\n                                e.currentTarget.setSelectionRange(\r\n                                    e.currentTarget.value.length,\r\n                                    e.currentTarget.value.length\r\n                                )}\r\n                            className={style.statusInput}\r\n                            onChange={e => setValueInput(e.currentTarget.value)}\r\n\r\n                        />\r\n\r\n                        : <>\r\n                            <SpanText value={props.value}\r\n                                      className={style.textStatus}/>\r\n\r\n                            <IconButton size={'small'} disabled={editMode} onClick={onClickHandler}>\r\n                                <CreateIcon className={style.icon}/>\r\n                            </IconButton>\r\n                        </>\r\n                    }\r\n                </>\r\n                : <SpanText value={props.value}/>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\ntype SpanTextType = {\r\n    value: string | null\r\n    className?: string\r\n    callback?: () => void\r\n}\r\nconst SpanText = (props: SpanTextType) => {\r\n    return <span className={props.className}\r\n                 onDoubleClick={props.callback}>\r\n            {props.value || 'нету даных'}\r\n        </span>\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}