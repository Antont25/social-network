{"ast":null,"code":"const initialState = {\n  dialogs: [{\n    id: 1,\n    name: 'Amdrey'\n  }, {\n    id: 2,\n    name: 'Any'\n  }],\n  messages: [{\n    id: 1,\n    message: 'yoooo'\n  }, {\n    id: 1,\n    message: 'ysss'\n  }]\n};\nexport const dialogsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'ADD_MESSAGE':\n      let newMessages = {\n        id: 3,\n        message: action.payload\n      };\n      return { ...state,\n        messages: [newMessages, ...state.messages]\n      };\n\n    default:\n      return state;\n  }\n};\nexport const addMessage = payload => ({\n  type: 'ADD_MESSAGE',\n  payload\n});","map":{"version":3,"names":["initialState","dialogs","id","name","messages","message","dialogsReducer","state","action","type","newMessages","payload","addMessage"],"sources":["G:/program/practica/react-practica/it-incubator/samurai-way-TS/src/redux/dialogsReducer.ts"],"sourcesContent":["type InitialStateType = typeof initialState\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessagesType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type ActionDialogsReducerType = ReturnType<typeof addMessage>\r\n\r\nconst initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Amdrey'},\r\n        {id: 2, name: 'Any'}\r\n    ] as Array<DialogsType>,\r\n    messages: [\r\n        {id: 1, message: 'yoooo'},\r\n        {id: 1, message: 'ysss'},\r\n    ] as Array<MessagesType>,\r\n}\r\n\r\nexport const dialogsReducer = (state = initialState, action: ActionDialogsReducerType): InitialStateType => {\r\n    switch (action.type) {\r\n        case  'ADD_MESSAGE':\r\n            let newMessages: MessagesType = {id: 3, message: action.payload}\r\n            return {\r\n                ...state,\r\n                messages: [newMessages, ...state.messages]\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\n\r\nexport const addMessage = (payload: string) => ({type: 'ADD_MESSAGE', payload} as const)\r\n"],"mappings":"AAWA,MAAMA,YAAY,GAAG;EACjBC,OAAO,EAAE,CACL;IAACC,EAAE,EAAE,CAAL;IAAQC,IAAI,EAAE;EAAd,CADK,EAEL;IAACD,EAAE,EAAE,CAAL;IAAQC,IAAI,EAAE;EAAd,CAFK,CADQ;EAKjBC,QAAQ,EAAE,CACN;IAACF,EAAE,EAAE,CAAL;IAAQG,OAAO,EAAE;EAAjB,CADM,EAEN;IAACH,EAAE,EAAE,CAAL;IAAQG,OAAO,EAAE;EAAjB,CAFM;AALO,CAArB;AAWA,OAAO,MAAMC,cAAc,GAAG,YAA8E;EAAA,IAA7EC,KAA6E,uEAArEP,YAAqE;EAAA,IAAvDQ,MAAuD;;EACxG,QAAQA,MAAM,CAACC,IAAf;IACI,KAAM,aAAN;MACI,IAAIC,WAAyB,GAAG;QAACR,EAAE,EAAE,CAAL;QAAQG,OAAO,EAAEG,MAAM,CAACG;MAAxB,CAAhC;MACA,OAAO,EACH,GAAGJ,KADA;QAEHH,QAAQ,EAAE,CAACM,WAAD,EAAc,GAAGH,KAAK,CAACH,QAAvB;MAFP,CAAP;;IAKJ;MACI,OAAOG,KAAP;EATR;AAWH,CAZM;AAeP,OAAO,MAAMK,UAAU,GAAID,OAAD,KAAsB;EAACF,IAAI,EAAE,aAAP;EAAsBE;AAAtB,CAAtB,CAAnB"},"metadata":{},"sourceType":"module"}