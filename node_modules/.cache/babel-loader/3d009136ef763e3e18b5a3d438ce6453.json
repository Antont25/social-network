{"ast":null,"code":"import axios from 'axios';\nconst instance = axios.create({\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n  withCredentials: true,\n  headers: {\n    'API-KEY': 'b68e1396-946f-405d-92ed-906f9f26a9d8'\n  }\n});\nexport const api = {\n  async getUser(currentPage) {\n    const response = await instance.get(`users?page=${currentPage}`);\n    return response.data;\n  },\n\n  async getUserProfile(paramsURL) {\n    const response = await instance.get(`profile/${paramsURL}`);\n    return response.data;\n  },\n\n  async authorizedMe() {\n    const response = await instance.get(`auth/me`);\n    return response.data;\n  },\n\n  async unFollowUser(usersId) {\n    const response = await instance.delete(`follow/${usersId}`);\n    return response.data;\n  },\n\n  async followUser(usersId) {\n    const response = await instance.post(`follow/${usersId}`);\n    return response.data;\n  },\n\n  async statusUpdates(newStatus) {\n    const response = await instance.put(`profile/status`, {\n      status: newStatus\n    });\n    return response.data;\n  },\n\n  async getStatusUser(userId) {\n    const response = await instance.get(`profile/status/${userId}`);\n    return response.data;\n  },\n\n  async authorize(email, password) {\n    const response = await instance.post(`auth/login`, {\n      email,\n      password\n    });\n    return response.data;\n  },\n\n  async logout() {\n    const response = await instance.delete(`auth/login`);\n    return response.data;\n  },\n\n  async savePhoto(image) {\n    const bodyFormData = new FormData();\n    bodyFormData.append('image', image);\n    const response = await instance.put(`profile/photo`, bodyFormData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n\n  async logout() {\n    const response = await instance.delete(`auth/login`);\n    return response.data;\n  }\n\n}; //type","map":{"version":3,"names":["axios","instance","create","baseURL","withCredentials","headers","api","getUser","currentPage","response","get","data","getUserProfile","paramsURL","authorizedMe","unFollowUser","usersId","delete","followUser","post","statusUpdates","newStatus","put","status","getStatusUser","userId","authorize","email","password","logout","savePhoto","image","bodyFormData","FormData","append"],"sources":["C:/program/samurai-way-TS/src/api/api.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'b68e1396-946f-405d-92ed-906f9f26a9d8'\r\n    }\r\n})\r\n\r\n\r\nexport const api = {\r\n    async getUser(currentPage: number) {\r\n        const response = await instance.get<FetchUserType>(`users?page=${currentPage}`)\r\n        return response.data\r\n    },\r\n    async getUserProfile(paramsURL: number) {\r\n        const response = await instance.get<UserProfileType>(`profile/${paramsURL}`)\r\n        return response.data\r\n    },\r\n    async authorizedMe() {\r\n        const response = await instance.get<ResponseType<AuthorizedUserType>>(`auth/me`)\r\n        return response.data\r\n    },\r\n    async unFollowUser(usersId: number) {\r\n        const response = await instance.delete<ResponseType>(`follow/${usersId}`)\r\n        return response.data\r\n    },\r\n    async followUser(usersId: number) {\r\n        const response = await instance.post<ResponseType>(`follow/${usersId}`)\r\n        return response.data\r\n    },\r\n    async statusUpdates(newStatus: string) {\r\n        const response = await instance.put<ResponseType>(`profile/status`, {status: newStatus})\r\n        return response.data\r\n    },\r\n    async getStatusUser(userId: number) {\r\n        const response = await instance.get<string | null>(`profile/status/${userId}`)\r\n        return response.data\r\n    },\r\n    async authorize(email: string, password: string) {\r\n        const response = await instance.post<ResponseType<{ id: number }>>(`auth/login`, {email, password})\r\n        return response.data\r\n    },\r\n    async logout() {\r\n        const response = await instance.delete<ResponseType>(`auth/login`)\r\n        return response.data\r\n    },\r\n    async savePhoto(image: string) {\r\n        const bodyFormData = new FormData();\r\n        bodyFormData.append('image', image)\r\n\r\n        const response = await instance.put<ResponseType<PhotosTypeResponse>>(`profile/photo`, bodyFormData, {\r\n                headers: {'Content-Type': 'multipart/form-data'}\r\n            }\r\n            ,)\r\n        return response.data\r\n    },\r\n    async logout() {\r\n        const response = await instance.delete<ResponseType>(`auth/login`)\r\n        return response.data\r\n    },\r\n\r\n}\r\n\r\n//type\r\nexport type PhotosTypeResponse = {\r\n    photos: PhotosType\r\n\r\n}\r\nexport type PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: T\r\n}\r\nexport type AuthorizedUserType = {\r\n    id: null | number\r\n    email: null | string\r\n    login: null | string\r\n\r\n}\r\nexport type UserProfileType = {\r\n    aboutMe: string | null\r\n    contacts: {\r\n        facebook: string | null\r\n        website: string | null\r\n        vk: string | null\r\n        twitter: string | null\r\n        instagram: string | null\r\n        youtube: string | null,\r\n        github: string | null\r\n        mainLink: string | null\r\n    },\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    fullName: string | null\r\n    userId: number\r\n    photos: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n}\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: null\r\n    photos: {\r\n        small: null | string\r\n        large: null | string\r\n    },\r\n    status: null | string\r\n    followed: boolean\r\n}\r\nexport type FetchUserType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: null\r\n}"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAa;EAC1BC,OAAO,EAAE,+CADiB;EAE1BC,eAAe,EAAE,IAFS;EAG1BC,OAAO,EAAE;IACL,WAAW;EADN;AAHiB,CAAb,CAAjB;AASA,OAAO,MAAMC,GAAG,GAAG;EACf,MAAMC,OAAN,CAAcC,WAAd,EAAmC;IAC/B,MAAMC,QAAQ,GAAG,MAAMR,QAAQ,CAACS,GAAT,CAA6B,cAAaF,WAAY,EAAtD,CAAvB;IACA,OAAOC,QAAQ,CAACE,IAAhB;EACH,CAJc;;EAKf,MAAMC,cAAN,CAAqBC,SAArB,EAAwC;IACpC,MAAMJ,QAAQ,GAAG,MAAMR,QAAQ,CAACS,GAAT,CAA+B,WAAUG,SAAU,EAAnD,CAAvB;IACA,OAAOJ,QAAQ,CAACE,IAAhB;EACH,CARc;;EASf,MAAMG,YAAN,GAAqB;IACjB,MAAML,QAAQ,GAAG,MAAMR,QAAQ,CAACS,GAAT,CAAgD,SAAhD,CAAvB;IACA,OAAOD,QAAQ,CAACE,IAAhB;EACH,CAZc;;EAaf,MAAMI,YAAN,CAAmBC,OAAnB,EAAoC;IAChC,MAAMP,QAAQ,GAAG,MAAMR,QAAQ,CAACgB,MAAT,CAA+B,UAASD,OAAQ,EAAhD,CAAvB;IACA,OAAOP,QAAQ,CAACE,IAAhB;EACH,CAhBc;;EAiBf,MAAMO,UAAN,CAAiBF,OAAjB,EAAkC;IAC9B,MAAMP,QAAQ,GAAG,MAAMR,QAAQ,CAACkB,IAAT,CAA6B,UAASH,OAAQ,EAA9C,CAAvB;IACA,OAAOP,QAAQ,CAACE,IAAhB;EACH,CApBc;;EAqBf,MAAMS,aAAN,CAAoBC,SAApB,EAAuC;IACnC,MAAMZ,QAAQ,GAAG,MAAMR,QAAQ,CAACqB,GAAT,CAA4B,gBAA5B,EAA6C;MAACC,MAAM,EAAEF;IAAT,CAA7C,CAAvB;IACA,OAAOZ,QAAQ,CAACE,IAAhB;EACH,CAxBc;;EAyBf,MAAMa,aAAN,CAAoBC,MAApB,EAAoC;IAChC,MAAMhB,QAAQ,GAAG,MAAMR,QAAQ,CAACS,GAAT,CAA6B,kBAAiBe,MAAO,EAArD,CAAvB;IACA,OAAOhB,QAAQ,CAACE,IAAhB;EACH,CA5Bc;;EA6Bf,MAAMe,SAAN,CAAgBC,KAAhB,EAA+BC,QAA/B,EAAiD;IAC7C,MAAMnB,QAAQ,GAAG,MAAMR,QAAQ,CAACkB,IAAT,CAA6C,YAA7C,EAA0D;MAACQ,KAAD;MAAQC;IAAR,CAA1D,CAAvB;IACA,OAAOnB,QAAQ,CAACE,IAAhB;EACH,CAhCc;;EAiCf,MAAMkB,MAAN,GAAe;IACX,MAAMpB,QAAQ,GAAG,MAAMR,QAAQ,CAACgB,MAAT,CAA+B,YAA/B,CAAvB;IACA,OAAOR,QAAQ,CAACE,IAAhB;EACH,CApCc;;EAqCf,MAAMmB,SAAN,CAAgBC,KAAhB,EAA+B;IAC3B,MAAMC,YAAY,GAAG,IAAIC,QAAJ,EAArB;IACAD,YAAY,CAACE,MAAb,CAAoB,OAApB,EAA6BH,KAA7B;IAEA,MAAMtB,QAAQ,GAAG,MAAMR,QAAQ,CAACqB,GAAT,CAAgD,eAAhD,EAAgEU,YAAhE,EAA8E;MAC7F3B,OAAO,EAAE;QAAC,gBAAgB;MAAjB;IADoF,CAA9E,CAAvB;IAIA,OAAOI,QAAQ,CAACE,IAAhB;EACH,CA9Cc;;EA+Cf,MAAMkB,MAAN,GAAe;IACX,MAAMpB,QAAQ,GAAG,MAAMR,QAAQ,CAACgB,MAAT,CAA+B,YAA/B,CAAvB;IACA,OAAOR,QAAQ,CAACE,IAAhB;EACH;;AAlDc,CAAZ,C,CAsDP"},"metadata":{},"sourceType":"module"}