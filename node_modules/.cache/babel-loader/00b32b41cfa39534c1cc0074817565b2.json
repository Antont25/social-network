{"ast":null,"code":"var _jsxFileName = \"C:\\\\program\\\\samurai-way-TS\\\\src\\\\components\\\\EditMode\\\\EditMode.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport CreateIcon from '@material-ui/icons/Create';\nimport style from '../users/users.module.css';\nimport TextField from '@material-ui/core/TextField/TextField';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const EditMode = props => {\n  _s();\n\n  const [valueInput, setValueInput] = useState(props.value);\n  const [editMode, setEditMode] = useState(false);\n\n  function onClickHandler() {\n    debugger;\n    setEditMode(!editMode);\n  }\n\n  function onBlurHandler() {\n    debug;\n    ger;\n\n    if (valueInput !== props.value) {\n      valueInput && props.callback(valueInput);\n    }\n\n    setEditMode(false);\n  }\n\n  useEffect(() => {\n    setValueInput(props.value);\n  }, [props.value]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: props.isOwner ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CreateIcon, {\n        className: style.icon,\n        onClick: onClickHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this), editMode ? /*#__PURE__*/_jsxDEV(TextField, {\n        id: 'status',\n        label: \"status\",\n        multiline: true,\n        autoFocus: true,\n        maxRows: 4,\n        inputProps: {\n          maxLength: 100\n        },\n        value: valueInput,\n        onBlur: onBlurHandler,\n        onFocus: e => e.currentTarget.setSelectionRange(e.currentTarget.value.length, e.currentTarget.value.length),\n        className: style.statusInput,\n        onChange: e => setValueInput(e.currentTarget.value),\n        variant: \"filled\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 27\n      }, this) : /*#__PURE__*/_jsxDEV(SpanText, {\n        value: props.value,\n        className: style.textStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(SpanText, {\n      value: props.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 19\n    }, this)\n  }, void 0, false);\n};\n\n_s(EditMode, \"MG5HMnYWRA/oLorz2l+D/5d5i5M=\");\n\n_c = EditMode;\n\nconst SpanText = props => {\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: props.className,\n    onDoubleClick: props.callback,\n    children: props.value || 'нету даных'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 12\n  }, this);\n};\n\n_c2 = SpanText;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditMode\");\n$RefreshReg$(_c2, \"SpanText\");","map":{"version":3,"names":["React","useEffect","useState","CreateIcon","style","TextField","EditMode","props","valueInput","setValueInput","value","editMode","setEditMode","onClickHandler","onBlurHandler","debug","ger","callback","isOwner","icon","maxLength","e","currentTarget","setSelectionRange","length","statusInput","textStatus","SpanText","className"],"sources":["C:/program/samurai-way-TS/src/components/EditMode/EditMode.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport style from '../users/users.module.css';\r\nimport TextField from '@material-ui/core/TextField/TextField';\r\n\r\ntype EditModeParams = {\r\n    value: string | null\r\n    isOwner: boolean\r\n    callback: (value: string) => void\r\n};\r\nexport const EditMode = (props: EditModeParams) => {\r\n\r\n    const [valueInput, setValueInput] = useState(props.value)\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    function onClickHandler() {\r\n        debugger\r\n        setEditMode(!editMode)\r\n    }\r\n\r\n    function onBlurHandler() {\r\n        debug\r\n        ger\r\n        if (valueInput !== props.value) {\r\n            valueInput && props.callback(valueInput)\r\n        }\r\n        setEditMode(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setValueInput(props.value)\r\n    }, [props.value])\r\n\r\n    return (\r\n        <>\r\n            {props.isOwner\r\n                ? <>\r\n                    <CreateIcon className={style.icon} onClick={onClickHandler}/>\r\n                    {editMode\r\n                        ? <TextField\r\n                            id={'status'}\r\n                            label=\"status\"\r\n                            multiline\r\n                            autoFocus={true}\r\n                            maxRows={4}\r\n                            inputProps={{maxLength: 100}}\r\n                            value={valueInput}\r\n                            onBlur={onBlurHandler}\r\n                            onFocus={(e) =>\r\n                                e.currentTarget.setSelectionRange(\r\n                                    e.currentTarget.value.length,\r\n                                    e.currentTarget.value.length\r\n                                )}\r\n                            className={style.statusInput}\r\n                            onChange={e => setValueInput(e.currentTarget.value)}\r\n                            variant=\"filled\"/>\r\n\r\n                        : <SpanText value={props.value}\r\n                                    className={style.textStatus}/>\r\n                    }\r\n                </>\r\n                : <SpanText value={props.value}/>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\ntype SpanTextType = {\r\n    value: string | null\r\n    className?: string\r\n    callback?: () => void\r\n}\r\nconst SpanText = (props: SpanTextType) => {\r\n    return <span className={props.className}\r\n                 onDoubleClick={props.callback}>\r\n            {props.value || 'нету даных'}\r\n        </span>\r\n}\r\n\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,OAAOC,SAAP,MAAsB,uCAAtB;;;AAOA,OAAO,MAAMC,QAAQ,GAAIC,KAAD,IAA2B;EAAA;;EAE/C,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAACK,KAAK,CAACG,KAAP,CAA5C;EACA,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,KAAD,CAAxC;;EAEA,SAASW,cAAT,GAA0B;IACtB;IACAD,WAAW,CAAC,CAACD,QAAF,CAAX;EACH;;EAED,SAASG,aAAT,GAAyB;IACrBC,KAAK;IACLC,GAAG;;IACH,IAAIR,UAAU,KAAKD,KAAK,CAACG,KAAzB,EAAgC;MAC5BF,UAAU,IAAID,KAAK,CAACU,QAAN,CAAeT,UAAf,CAAd;IACH;;IACDI,WAAW,CAAC,KAAD,CAAX;EACH;;EAEDX,SAAS,CAAC,MAAM;IACZQ,aAAa,CAACF,KAAK,CAACG,KAAP,CAAb;EACH,CAFQ,EAEN,CAACH,KAAK,CAACG,KAAP,CAFM,CAAT;EAIA,oBACI;IAAA,UACKH,KAAK,CAACW,OAAN,gBACK;MAAA,wBACE,QAAC,UAAD;QAAY,SAAS,EAAEd,KAAK,CAACe,IAA7B;QAAmC,OAAO,EAAEN;MAA5C;QAAA;QAAA;QAAA;MAAA,QADF,EAEGF,QAAQ,gBACH,QAAC,SAAD;QACE,EAAE,EAAE,QADN;QAEE,KAAK,EAAC,QAFR;QAGE,SAAS,MAHX;QAIE,SAAS,EAAE,IAJb;QAKE,OAAO,EAAE,CALX;QAME,UAAU,EAAE;UAACS,SAAS,EAAE;QAAZ,CANd;QAOE,KAAK,EAAEZ,UAPT;QAQE,MAAM,EAAEM,aARV;QASE,OAAO,EAAGO,CAAD,IACLA,CAAC,CAACC,aAAF,CAAgBC,iBAAhB,CACIF,CAAC,CAACC,aAAF,CAAgBZ,KAAhB,CAAsBc,MAD1B,EAEIH,CAAC,CAACC,aAAF,CAAgBZ,KAAhB,CAAsBc,MAF1B,CAVN;QAcE,SAAS,EAAEpB,KAAK,CAACqB,WAdnB;QAeE,QAAQ,EAAEJ,CAAC,IAAIZ,aAAa,CAACY,CAAC,CAACC,aAAF,CAAgBZ,KAAjB,CAf9B;QAgBE,OAAO,EAAC;MAhBV;QAAA;QAAA;QAAA;MAAA,QADG,gBAmBH,QAAC,QAAD;QAAU,KAAK,EAAEH,KAAK,CAACG,KAAvB;QACU,SAAS,EAAEN,KAAK,CAACsB;MAD3B;QAAA;QAAA;QAAA;MAAA,QArBR;IAAA,gBADL,gBA0BK,QAAC,QAAD;MAAU,KAAK,EAAEnB,KAAK,CAACG;IAAvB;MAAA;MAAA;MAAA;IAAA;EA3BV,iBADJ;AAgCH,CAvDM;;GAAMJ,Q;;KAAAA,Q;;AA8Db,MAAMqB,QAAQ,GAAIpB,KAAD,IAAyB;EACtC,oBAAO;IAAM,SAAS,EAAEA,KAAK,CAACqB,SAAvB;IACM,aAAa,EAAErB,KAAK,CAACU,QAD3B;IAAA,UAEEV,KAAK,CAACG,KAAN,IAAe;EAFjB;IAAA;IAAA;IAAA;EAAA,QAAP;AAIH,CALD;;MAAMiB,Q"},"metadata":{},"sourceType":"module"}