{"ast":null,"code":"var _jsxFileName = \"C:\\\\program\\\\samurai-way-TS\\\\src\\\\pages\\\\Profile.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { MyPosts } from '../components/Profile/MyPosts/MyPosts';\nimport UserInfo from '../components/Profile/UserInfo/UserInfo';\nimport { Loading } from '../components/common/Loading/Loading';\nimport { useParams } from 'react-router';\nimport { useNavigate } from 'react-router-dom';\nimport { fetchUserProfileData } from '../redux/profileReducer';\nimport { useAppDispatch, useAppSelector } from '../utils/hooks/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Profile = () => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const authorizedStatus = useAppSelector(state => state.app.authorizedStatus);\n  const authorizedUser = useAppSelector(state => state.app.authorizedUser);\n  const isLoading = useAppSelector(state => state.app.isLoading);\n  const posts = useAppSelector(state => state.profilePage.posts);\n  const userProfile = useAppSelector(state => state.profilePage.userProfile);\n  const userStatus = useAppSelector(state => state.profilePage.userStatus);\n  let params = useParams();\n  let paramsURL = Number(params['id']);\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (authorizedStatus === 'successfully' && !params['id']) {\n      if (authorizedUser.id) paramsURL = authorizedUser.id;\n    }\n\n    if (authorizedStatus === 'successfully' || paramsURL) {\n      dispatch(fetchUserProfileData(paramsURL));\n    } else if (authorizedStatus === 'fail') {\n      navigate('/Login');\n    }\n  }, [authorizedStatus, paramsURL]);\n\n  if (Object.keys(userProfile).length === 0 || isLoading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(UserInfo, {\n      userProfile: userProfile,\n      authorizedUserId: authorizedUser.id,\n      userStatus: userStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MyPosts, {\n      photoUser: userProfile.photos.small,\n      posts: posts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Profile, \"PEZ8Ea6cJmXV5UyOCL/V7/VN3h4=\", false, function () {\n  return [useAppDispatch, useAppSelector, useAppSelector, useAppSelector, useAppSelector, useAppSelector, useAppSelector, useParams, useNavigate];\n});\n\n_c = Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useEffect","MyPosts","UserInfo","Loading","useParams","useNavigate","fetchUserProfileData","useAppDispatch","useAppSelector","Profile","dispatch","authorizedStatus","state","app","authorizedUser","isLoading","posts","profilePage","userProfile","userStatus","params","paramsURL","Number","navigate","id","Object","keys","length","photos","small"],"sources":["C:/program/samurai-way-TS/src/pages/Profile.tsx"],"sourcesContent":["import React, {useEffect} from 'react';\r\nimport {MyPosts} from '../components/Profile/MyPosts/MyPosts';\r\nimport UserInfo from '../components/Profile/UserInfo/UserInfo';\r\nimport {Loading} from '../components/common/Loading/Loading';\r\nimport {useParams} from 'react-router';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport {fetchUserProfileData,} from '../redux/profileReducer';\r\nimport {useAppDispatch, useAppSelector} from '../utils/hooks/hooks';\r\n\r\n\r\nexport const Profile = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const authorizedStatus = useAppSelector(state => state.app.authorizedStatus)\r\n    const authorizedUser = useAppSelector(state => state.app.authorizedUser)\r\n    const isLoading = useAppSelector(state => state.app.isLoading)\r\n    const posts = useAppSelector(state => state.profilePage.posts)\r\n    const userProfile = useAppSelector(state => state.profilePage.userProfile)\r\n    const userStatus = useAppSelector(state => state.profilePage.userStatus)\r\n\r\n    let params = useParams<'id'>()\r\n    let paramsURL = Number(params['id'])\r\n\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        if (authorizedStatus === 'successfully' && !params['id']) {\r\n            if (authorizedUser.id) paramsURL = authorizedUser.id\r\n        }\r\n        if (authorizedStatus === 'successfully' || paramsURL) {\r\n            dispatch(fetchUserProfileData(paramsURL))\r\n        } else if (authorizedStatus === 'fail') {\r\n            navigate('/Login')\r\n        }\r\n\r\n    }, [authorizedStatus, paramsURL])\r\n\r\n    if (Object.keys(userProfile).length === 0 || isLoading) {\r\n        return <Loading/>\r\n    }\r\n    return (\r\n        <>\r\n            <UserInfo userProfile={userProfile}\r\n                      authorizedUserId={authorizedUser.id}\r\n                      userStatus={userStatus}/>\r\n            <MyPosts photoUser={userProfile.photos.small}\r\n                     posts={posts}\r\n            />\r\n        </>);\r\n};\r\n\r\n\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,OAAR,QAAsB,uCAAtB;AACA,OAAOC,QAAP,MAAqB,yCAArB;AACA,SAAQC,OAAR,QAAsB,sCAAtB;AACA,SAAQC,SAAR,QAAwB,cAAxB;AACA,SAAQC,WAAR,QAA0B,kBAA1B;AACA,SAAQC,oBAAR,QAAoC,yBAApC;AACA,SAAQC,cAAR,EAAwBC,cAAxB,QAA6C,sBAA7C;;;AAGA,OAAO,MAAMC,OAAO,GAAG,MAAM;EAAA;;EACzB,MAAMC,QAAQ,GAAGH,cAAc,EAA/B;EAEA,MAAMI,gBAAgB,GAAGH,cAAc,CAACI,KAAK,IAAIA,KAAK,CAACC,GAAN,CAAUF,gBAApB,CAAvC;EACA,MAAMG,cAAc,GAAGN,cAAc,CAACI,KAAK,IAAIA,KAAK,CAACC,GAAN,CAAUC,cAApB,CAArC;EACA,MAAMC,SAAS,GAAGP,cAAc,CAACI,KAAK,IAAIA,KAAK,CAACC,GAAN,CAAUE,SAApB,CAAhC;EACA,MAAMC,KAAK,GAAGR,cAAc,CAACI,KAAK,IAAIA,KAAK,CAACK,WAAN,CAAkBD,KAA5B,CAA5B;EACA,MAAME,WAAW,GAAGV,cAAc,CAACI,KAAK,IAAIA,KAAK,CAACK,WAAN,CAAkBC,WAA5B,CAAlC;EACA,MAAMC,UAAU,GAAGX,cAAc,CAACI,KAAK,IAAIA,KAAK,CAACK,WAAN,CAAkBE,UAA5B,CAAjC;EAEA,IAAIC,MAAM,GAAGhB,SAAS,EAAtB;EACA,IAAIiB,SAAS,GAAGC,MAAM,CAACF,MAAM,CAAC,IAAD,CAAP,CAAtB;EAEA,MAAMG,QAAQ,GAAGlB,WAAW,EAA5B;EAEAL,SAAS,CAAC,MAAM;IACZ,IAAIW,gBAAgB,KAAK,cAArB,IAAuC,CAACS,MAAM,CAAC,IAAD,CAAlD,EAA0D;MACtD,IAAIN,cAAc,CAACU,EAAnB,EAAuBH,SAAS,GAAGP,cAAc,CAACU,EAA3B;IAC1B;;IACD,IAAIb,gBAAgB,KAAK,cAArB,IAAuCU,SAA3C,EAAsD;MAClDX,QAAQ,CAACJ,oBAAoB,CAACe,SAAD,CAArB,CAAR;IACH,CAFD,MAEO,IAAIV,gBAAgB,KAAK,MAAzB,EAAiC;MACpCY,QAAQ,CAAC,QAAD,CAAR;IACH;EAEJ,CAVQ,EAUN,CAACZ,gBAAD,EAAmBU,SAAnB,CAVM,CAAT;;EAYA,IAAII,MAAM,CAACC,IAAP,CAAYR,WAAZ,EAAyBS,MAAzB,KAAoC,CAApC,IAAyCZ,SAA7C,EAAwD;IACpD,oBAAO,QAAC,OAAD;MAAA;MAAA;MAAA;IAAA,QAAP;EACH;;EACD,oBACI;IAAA,wBACI,QAAC,QAAD;MAAU,WAAW,EAAEG,WAAvB;MACU,gBAAgB,EAAEJ,cAAc,CAACU,EAD3C;MAEU,UAAU,EAAEL;IAFtB;MAAA;MAAA;MAAA;IAAA,QADJ,eAII,QAAC,OAAD;MAAS,SAAS,EAAED,WAAW,CAACU,MAAZ,CAAmBC,KAAvC;MACS,KAAK,EAAEb;IADhB;MAAA;MAAA;MAAA;IAAA,QAJJ;EAAA,gBADJ;AASH,CAvCM;;GAAMP,O;UACQF,c,EAEQC,c,EACFA,c,EACLA,c,EACJA,c,EACMA,c,EACDA,c,EAENJ,S,EAGIC,W;;;KAbRI,O"},"metadata":{},"sourceType":"module"}