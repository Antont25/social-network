{"ast":null,"code":"import { api } from \"../api/api\";\nlet initialState = {\n  isLoading: false,\n  authorizedStatus: 'initialization',\n  authorizedUser: {\n    id: null,\n    email: null,\n    login: null\n  },\n  authorizedProfileUser: {\n    photos: {\n      small: null\n    }\n  }\n};\nexport const authorizedReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'IS_LOADING':\n      return { ...state,\n        isLoading: action.payload\n      };\n\n    case 'SET_AUTHORIZED_USER':\n      return { ...state,\n        authorizedUser: { ...action.user\n        }\n      };\n\n    case 'SET_AUTHORIZED_PROFILE_USER':\n      return { ...state,\n        authorizedProfileUser: action.payload\n      };\n\n    case 'SET_AUTHORIZED_CODE':\n      return { ...state,\n        authorizedStatus: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n//action\nexport const setIsLoading = payload => ({\n  type: 'IS_LOADING',\n  payload\n});\nexport const setAuthorizedUser = user => ({\n  type: 'SET_AUTHORIZED_USER',\n  user\n});\nexport const setAuthorizedStatus = payload => ({\n  type: 'SET_AUTHORIZED_CODE',\n  payload\n});\nexport const setAuthorizedProfileUser = payload => ({\n  type: 'SET_AUTHORIZED_PROFILE_USER',\n  payload\n}); //thunk\n\nexport const fetchAuthorizedData = () => async dispatch => {\n  try {\n    dispatch(setIsLoading(true));\n    let response = await api.authorizedMe();\n\n    if (response.resultCode === 0) {\n      dispatch(setAuthorizedUser(response.data));\n      dispatch(setAuthorizedStatus('successfully'));\n      let responseUser = await api.getUserProfile(response.data.id);\n      dispatch(setAuthorizedProfileUser(responseUser));\n    } else {\n      dispatch(setAuthorizedStatus('fail'));\n    }\n  } catch (error) {\n    console.log(error);\n  } finally {\n    dispatch(setIsLoading(false));\n  }\n};\nexport const fetchAuthorization = (email, password, setStatus) => async dispatch => {\n  try {\n    dispatch(setIsLoading(true));\n    let response = await api.authorize(email, password);\n\n    if (response.resultCode === 0) {\n      dispatch(fetchAuthorizedData());\n    } else if (response.resultCode !== 0) {\n      setStatus(response.messages[0]);\n    }\n  } catch (error) {\n    console.log(error);\n  } finally {\n    dispatch(setIsLoading(false));\n  }\n};\nexport const fetchLogout = () => async dispatch => {\n  try {\n    dispatch(setIsLoading(true));\n    let response = await api.logout();\n\n    if (response.resultCode === 0) {\n      dispatch(fetchAuthorizedData());\n    }\n  } catch (error) {\n    console.log(error);\n  } finally {\n    dispatch(setIsLoading(false));\n  }\n};","map":{"version":3,"names":["api","initialState","isLoading","authorizedStatus","authorizedUser","id","email","login","authorizedProfileUser","photos","small","authorizedReducer","state","action","type","payload","user","setIsLoading","setAuthorizedUser","setAuthorizedStatus","setAuthorizedProfileUser","fetchAuthorizedData","dispatch","response","authorizedMe","resultCode","data","responseUser","getUserProfile","error","console","log","fetchAuthorization","password","setStatus","authorize","messages","fetchLogout","logout"],"sources":["G:/program/practica/react-practica/it-incubator/samurai-way-TS/src/redux/authorizedReducer.ts"],"sourcesContent":["import {api, AuthorizedUserType, UserProfileType} from \"../api/api\";\r\nimport {AppThunk} from \"./store\";\r\n\r\n\r\ntype InitialStateType = typeof initialState\r\nexport type ActionAuthorizedReducerType =\r\n    ReturnType<typeof setIsLoading>\r\n    | ReturnType<typeof setAuthorizedUser>\r\n    | ReturnType<typeof setAuthorizedStatus>\r\n    | ReturnType<typeof setAuthorizedProfileUser>\r\n\r\n\r\nlet initialState = {\r\n    isLoading: false,\r\n    authorizedStatus: 'initialization' as StatusAuthorizedType,\r\n    authorizedUser: {\r\n        id: null,\r\n        email: null,\r\n        login: null\r\n    } as AuthorizedUserType,\r\n    authorizedProfileUser: {\r\n        photos: {small: null}\r\n    } as UserProfileType,\r\n}\r\n\r\n\r\nexport const authorizedReducer = (state = initialState, action: ActionAuthorizedReducerType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'IS_LOADING':\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload\r\n            }\r\n        case 'SET_AUTHORIZED_USER':\r\n            return {\r\n                ...state,\r\n                authorizedUser: {...action.user},\r\n            }\r\n        case 'SET_AUTHORIZED_PROFILE_USER':\r\n            return {\r\n                ...state,\r\n                authorizedProfileUser: action.payload\r\n            }\r\n        case 'SET_AUTHORIZED_CODE':\r\n            return {\r\n                ...state,\r\n                authorizedStatus: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type StatusAuthorizedType = 'successfully' | 'initialization' | 'fail'\r\n\r\n//action\r\nexport const setIsLoading = (payload: boolean) => ({type: 'IS_LOADING', payload} as const)\r\nexport const setAuthorizedUser = (user: AuthorizedUserType) => ({type: 'SET_AUTHORIZED_USER', user} as const)\r\nexport const setAuthorizedStatus = (payload: StatusAuthorizedType) => ({type: 'SET_AUTHORIZED_CODE', payload} as const)\r\nexport const setAuthorizedProfileUser = (payload: UserProfileType) =>\r\n    ({type: 'SET_AUTHORIZED_PROFILE_USER', payload} as const)\r\n\r\n//thunk\r\nexport const fetchAuthorizedData = (): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(setIsLoading(true))\r\n        let response = await api.authorizedMe()\r\n        if (response.resultCode === 0) {\r\n            dispatch(setAuthorizedUser(response.data))\r\n            dispatch(setAuthorizedStatus('successfully'))\r\n            let responseUser = await api.getUserProfile(response.data.id)\r\n            dispatch(setAuthorizedProfileUser(responseUser))\r\n        } else {\r\n            dispatch(setAuthorizedStatus('fail'))\r\n        }\r\n    } catch (error) {\r\n        console.log(error)\r\n    } finally {\r\n        dispatch(setIsLoading(false))\r\n    }\r\n}\r\n\r\nexport const fetchAuthorization = (email: string, password: string, setStatus: any): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(setIsLoading(true))\r\n        let response = await api.authorize(email, password)\r\n        if (response.resultCode === 0) {\r\n            dispatch(fetchAuthorizedData())\r\n        } else if (response.resultCode !== 0) {\r\n            setStatus(response.messages[0])\r\n        }\r\n    } catch (error) {\r\n        console.log(error)\r\n    } finally {\r\n        dispatch(setIsLoading(false))\r\n    }\r\n}\r\nexport const fetchLogout = (): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(setIsLoading(true))\r\n        let response = await api.logout()\r\n        if (response.resultCode === 0) {\r\n            dispatch(fetchAuthorizedData())\r\n        }\r\n    } catch (error) {\r\n        console.log(error)\r\n    } finally {\r\n        dispatch(setIsLoading(false))\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}